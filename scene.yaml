# a:
#   url: file://a.js
#   bb: function(){console.log('asdasdsa')}

cameras:
    camera1:
        type: perspective
        focal_length: [[1,2]]
        # type: isometric
        # axis: [0,10]


lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .3
        ambient: 1

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw
        max_zoom: 16
    idw:
        type: GeoJSON
        url: squareGrid.geojson

layers:

    earth:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: '#ddeeee'

    landuse:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: '#aaffaa'

    water:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: '#88bbee'

    roads:
        data: { source: osm }
        filter:
            not: { kind: ["path", "rail"] }
        draw:
            lines:
                order: function() { return feature.sort_key; }
                color: gray
                width: 8
                cap: round
        highway:
            filter:
                kind: highway
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: '#cc6666'
                    width: 12
                    outline:
                        color: grey
                        width: 1.5
        minor_road:
            filter:
                kind: minor_road
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: lightgrey
                    width: 5

    buildings:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: |
                    function () {

                        var h = feature.height || 20;
                        h = Math.min((h + 50)/ 255, .8); // max brightness: .8
                        h = Math.max(h, .4); // min brightness: .4
                        return [h, h, h];
                    }
        # 3d-buildings:
        #     filter: { $zoom: { min: 15 } }
        #     draw:
        #         polygons:
        #             extrude: function () { return feature.height > 20 || $zoom >= 16; }

    idw_surface:
        data: { source: idw }
        draw:
            polygons:
                a: a.js
                extrude: |
                  function () {
                    return feature.z *10
                  }
                order: 99
                color: [.6, .6, .6]
                # color: |
                #     function () {
                #         function makeGradientColor(color1, color2, percent) {
                #             var newColor = {};
                #
                #             function makeChannel(a, b) {
                #                 return(a + Math.round((b-a)*(percent/100)));
                #             }
                #
                #             function makeColorPiece(num) {
                #                 num = Math.min(num, 255);   // not more than 255
                #                 num = Math.max(num, 0);     // not less than 0
                #                 var str = num.toString(16);
                #                 if (str.length < 2) {
                #                     str = "0" + str;
                #                 }
                #                 return(str);
                #             }
                #
                #             newColor.r = makeChannel(color1.r, color2.r);
                #             newColor.g = makeChannel(color1.g, color2.g);
                #             newColor.b = makeChannel(color1.b, color2.b);
                #             newColor.cssColor = "#" +
                #                                 makeColorPiece(newColor.r) +
                #                                 makeColorPiece(newColor.g) +
                #                                 makeColorPiece(newColor.b);
                #             return(newColor);
                #         }
                #         var yellow = {r:255, g:255, b:0};
                #         var blue = {r:0, g:0, b:255};
                #         var newColor = makeGradientColor(yellow, blue, 79);
                #         console.log("la feature e: " + JSON.stringify(feature))
                #         console.log(newColor)
                #         return(newColor);
                #     }



                # extrude: function () {return feature.properties.z > 20 || $zoom >= 16; }
                # color:  |
                #     function () {
                #
                #         var h = feature.properties.z || 20;
                #         h = Math.min((h + 50)/ 255, .8); // max brightness: .8
                #         h = Math.max(h, .4); // min brightness: .4
                #         console.log("array di colore: " + [h, h, h])
                #         # return [h, h, h];
                #         return "blue";
                #     }
                #     console.log("array di colore: " )
