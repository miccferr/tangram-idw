# a:
#   url: file://a.js
#   bb: function(){console.log('asdasdsa')}

cameras:
    camera1:
        type: isometric
        # axis: [.1, 3.5]
        # type: perspective
        # focal_length: [[1,2]]




lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .3
        ambient: 1

sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw
        max_zoom: 16
    idw:
        type: GeoJSON
        url: squareGrid.geojson
        # url: squareGrid2.geojson
        url: map.geojson
global:
   a: red
   colors: # group common colors together
      color1: red
      color2: green
      color3: |
        function() {
              console.log('asd')
             var arr = Object.keys( obj ).map(function ( key ) { return obj[key]; });
             var min = Math.min.apply( null, arr );
             var max = Math.max.apply( null, arr );
             return 'asdas'
              }

layers:

    earth:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: '#ddeeee'

    landuse:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: '#aaffaa'

    water:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: '#88bbee'

    roads:
        data: { source: osm }
        filter:
            not: { kind: ["path", "rail"] }
        draw:
            lines:
                order: function() { return feature.sort_key; }
                color: gray
                width: 8
                cap: round
        highway:
            filter:
                kind: highway
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: '#cc6666'
                    width: 12
                    outline:
                        color: grey
                        width: 1.5
        minor_road:
            filter:
                kind: minor_road
            draw:
                lines:
                    order: function() { return feature.sort_key; }
                    color: lightgrey
                    width: 5

    buildings:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: |
                    function () {
                        var h = feature.height || 20;
                        h = Math.min((h + 50)/ 255, .8); // max brightness: .8
                        h = Math.max(h, .4); // min brightness: .4
                        return [h, h, h];
                    }
        3d-buildings:
            filter: { $zoom: { min: 15 } }
            draw:
                polygons:
                    extrude: function () { return feature.height > 20*8 || $zoom >= 10; }

    idw_surface:
        data: { source: idw }
        draw:
            polygons:
                order: 99
                # color: red
                color: a
                extrude: |
                  function () {
                  console.log('this ' )
                  return feature.z * 100 || $zoom >= 10;
                  }
                # shaders:
                #   blocks:
                #       global: |
                #           float unpack(vec4 h) {
                #               return (h.r * 1. + h.g / 256. + h.b / 65536.);
                #           }
                #       color: |
                #           float height = unpack(color);
                #           color = vec4(1.0);
                #
                #           // Color ramps
                #           vec3 colors[5];
                #           colors[0] = vec3(0.);
                #           colors[1] = vec3(.4, .55, .3);
                #           colors[2] = vec3(.9, .9, .6);
                #           colors[3] = vec3(.6, .4, .3);
                #           colors[4] = vec3(1., 1., 1.);
                #
                #           float step1 = 0.5015; // bottom
                #           float step2 = 0.503;
                #           float step3 = 0.505;
                #           float step4 = 0.51;
                #           float step5 = 0.52; // top
                #
                #           color.rgb = mix(colors[0], colors[1], smoothstep(step1, step2, height));
                #           color.rgb = mix(color.rgb, colors[2], smoothstep(step2, step3, height));
                #           color.rgb = mix(color.rgb, colors[3], smoothstep(step3, step4, height));
                #           color.rgb = mix(color.rgb, colors[4], smoothstep(step4, step5, height));
                # # color: |
                #
                #   function() {
                #
                #         var myFunc = function (object) {
                #         var shortest = Number.MAX_VALUE;
                #         for (var key in object) {
                #         console.log(object)
                #           if (object[key] < shortest) {
                #             shortest = object[key];
                #           }
                #         };
                #
                #         return shortest;
                #     };
                #     console.log(myFunc(JSON.stringify(feature)))
                #   }
                #
                #
                #
                #
                #
                #     function () {
                #         function makeGradientColor(color1, color2, percent) {
                #             var newColor = {};
                #
                #             function makeChannel(a, b) {
                #                 return(a + Math.round((b-a)*(percent/100)));
                #             }
                #
                #             function makeColorPiece(num) {
                #                 num = Math.min(num, 255);   // not more than 255
                #                 num = Math.max(num, 0);     // not less than 0
                #                 var str = num.toString(16);
                #                 if (str.length < 2) {
                #                     str = "0" + str;
                #                 }
                #                 return(str);
                #             }
                #
                #             newColor.r = makeChannel(color1.r, color2.r);
                #             newColor.g = makeChannel(color1.g, color2.g);
                #             newColor.b = makeChannel(color1.b, color2.b);
                #             newColor.cssColor = "#" +
                #                                 makeColorPiece(newColor.r) +
                #                                 makeColorPiece(newColor.g) +
                #                                 makeColorPiece(newColor.b);
                #             return(newColor);
                #         }
                #         var yellow = {r:255, g:255, b:0};
                #         var blue = {r:0, g:0, b:255};
                #         var newColor = makeGradientColor(yellow, blue, 79);
                #         console.log("la feature e: " + JSON.stringify(feature))
                #         console.log(newColor)
                #         return(newColor);
                #     }



                # extrude: function () {return feature.properties.z > 20 || $zoom >= 16; }
                # color:  |
                #     function () {
                #
                #         var h = feature.properties.z || 20;
                #         h = Math.min((h + 50)/ 255, .8); // max brightness: .8
                #         h = Math.max(h, .4); // min brightness: .4
                #         console.log("array di colore: " + [h, h, h])
                #         # return [h, h, h];
                #         return "blue";
                #     }
                #     console.log("array di colore: " )
